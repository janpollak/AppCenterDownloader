#Add your App Center token
token=""

user=$(id -un)

#Pick your download directory.
downloadDirectory=$"/Users/$user/Desktop"

#Add apps
searchedApps=(
#Sample app format: organisation-name/app-name
)

user=$(id -un)
appData=$(curl -X GET "https://api.appcenter.ms/v0.1/apps" -H "accept: application/json" -H "X-API-Token: $token" --silent)

getLatestRelease () {
  appName=$(cut -d "/" -f2 <<< "$1")

  releaseData=$(curl -X GET "https://api.appcenter.ms/v0.1/apps/$1/releases/latest" -H "accept: application/json" -H "X-API-Token: $token" --silent)
  downloadUrl=$(jq -r '.download_url' <<< "${releaseData}")
  os=$(jq -r '.app_os' <<< "${releaseData}")

  if [ "$os" == "iOS" ]
  then
    fileEnding=$"ipa"
  else
    fileEnding=$"apk"
  fi

  releaseNotes=$(jq -r '.release_notes' <<< "${releaseData}")
  displayName=$(jq -r '.app_display_name' <<< "${releaseData}")
  size=$(jq -r '.size' <<< "${releaseData}")

  oldRelease=$"$downloadDirectory/$appName.$fileEnding"

  if [ -f "$oldRelease" ]; then
    oldSize=$(stat -f%z $oldRelease)
  fi

  if [ "$oldSize" == "$size" ]
  then
    echo "$displayName – Current build is up to date"
  else
    echo "$displayName – New build available"
    rm -f $oldRelease
    downloadRelease $downloadUrl $appName $fileEnding
  fi
}

downloadRelease () {
  echo "Downloading $displayName"
  curl $1 --output $downloadDirectory/$2.$3 --silent
  showNotification "$releaseNotes" "$os" "$displayName"
}

showNotification () {
  osascript -e 'display notification "'"$1"'" with title "'"$2 – ""$3"' is downloaded"'
}

for app in ${searchedApps[*]}
do
  getLatestRelease $app
done
